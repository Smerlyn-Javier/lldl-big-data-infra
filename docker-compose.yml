############################
# COMPOSE FILE – LLDL STACK 
############################

# -------------------------------------------------------------------------
# Bloque de variables comunes para Airflow 
# -------------------------------------------------------------------------
x-airflow-env: &airflow-env
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: >-
    postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  AIRFLOW__CORE__LOAD_EXAMPLES: "False"
  _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USER:-airflow}
  _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PWD:-airflow}

############################
# REDES Y VOLUMENES
############################
networks:
  lldl-net:

volumes:
  kafka-data:
  zookeeper-data:
  postgres-data:
  spark-apps:
  airflow-dags:
  airflow-logs:
  spark-events:
  spark-checkpoints: 

############################
# SERVICIOS
############################
services:
  # -----------------------------------------------------------------------
  # ZOOKEEPER
  # -----------------------------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper
    networks: [lldl-net]

  # -----------------------------------------------------------------------
  # KAFKA
  # -----------------------------------------------------------------------
  kafka:
    image: bitnami/kafka:3.7
    depends_on: [zookeeper]
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:19092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://host.docker.internal:19092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "19092:19092"      
    networks: [lldl-net]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on: [kafka]
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    ports: ["8081:8080"]
    networks: [lldl-net]

  # -----------------------------------------------------------------------
  # SPARK MASTER
  # -----------------------------------------------------------------------
  spark-master:
    image: bitnami/spark:3.5.0
    environment:
      - SPARK_MODE=master
      - SPARK_EVENTLOG_ENABLED=true
      - SPARK_EVENTLOG_DIR=/opt/spark-events
    ports: ["7077:7077", "8082:8080"]
    volumes:
      - spark-apps:/opt/spark-apps
      - spark-events:/opt/spark-events
      - spark-checkpoints:/opt/spark-checkpoints
    networks: [lldl-net]

  # -----------------------------------------------------------------------
  # SPARK WORKER
  # -----------------------------------------------------------------------
  spark-worker-1:
    image: bitnami/spark:3.5.0
    depends_on: [spark-master]
    environment:
      - SPARK_MODE=worker
      - spark-events:/opt/spark-events
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "8083:8081"
    volumes:
      - spark-apps:/opt/spark-apps:ro
      - spark-checkpoints:/opt/spark-checkpoints
    networks: [lldl-net]

  # -----------------------------------------------------------------------
  # HISTORY SERVER
  # -----------------------------------------------------------------------   
  history-server:
    image: apache/spark:3.5.0
    container_name: spark-history
    depends_on: [spark-master]
    command: >
      /opt/spark/sbin/start-history-server.sh
      --properties-file /opt/spark/conf/spark-defaults.conf
    environment:
      - SPARK_NO_DAEMONIZE=1               
      - SPARK_HISTORY_OPTS=-Dspark.history.fs.logDirectory=/opt/spark-events
    volumes:
      - spark-events:/opt/spark-events     
    ports:
      - "18080:18080"
    networks: [lldl-net]
  # -----------------------------------------------------------------------
  # POSTGRES
  # -----------------------------------------------------------------------
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: ["5432:5432"]
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/init-sql:/docker-entrypoint-initdb.d
    networks: [lldl-net]

  # --------------------------------------------------------------------------
  # GPS-beacon simulator (Kafka producer)
  # --------------------------------------------------------------------------
  gps-producer:
    build: ./gps-producer        
    depends_on: [kafka]
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - TOPIC=truck-gps
    networks: [lldl-net]

  # -----------------------------------------------------------------------
  # AIRFLOW – INIT (crea BD y usuario)
  # -----------------------------------------------------------------------
  airflow-init:
    image: apache/airflow:2.9.2
    depends_on: [postgres]
    entrypoint: /bin/bash
    command: -c "airflow db migrate && airflow users create --username $${_AIRFLOW_WWW_USER_USERNAME} --firstname Admin --lastname User --role Admin --email admin@lldl.local --password $${_AIRFLOW_WWW_USER_PASSWORD} || true"
    env_file: .env
    environment:
      <<: *airflow-env
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks: [lldl-net]

# -----------------------------------------------------------------------
# AIRFLOW – WEBSERVER
# -----------------------------------------------------------------------
  airflow-webserver:
    image: apache/airflow:2.9.2
    depends_on: [airflow-init]
    ports: ["8086:8080"]
    env_file: .env
    environment:
      <<: *airflow-env
    command: airflow webserver
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock   
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags:ro
    networks: [lldl-net]

# -----------------------------------------------------------------------
# AIRFLOW – SCHEDULER
# -----------------------------------------------------------------------
  airflow-scheduler:
    image: apache/airflow:2.9.2
    depends_on: [airflow-webserver]
    env_file: .env
    environment:
      <<: *airflow-env
    command: airflow scheduler
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags:ro
    networks: [lldl-net]
